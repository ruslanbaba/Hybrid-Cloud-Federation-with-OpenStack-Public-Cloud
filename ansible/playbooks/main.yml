---
# Enterprise Hybrid Cloud Federation - Main Orchestration Playbook
# Principal Engineer Level - Zero Hard-coded Credentials

- name: "Enterprise Hybrid Cloud Federation Setup"
  hosts: localhost
  gather_facts: yes
  become: no
  vars:
    federation_environment: "{{ ansible_environment | default('production') }}"
    vault_address: "{{ lookup('env', 'VAULT_ADDR') }}"
    federation_domain: "federation.local"
    
  pre_tasks:
    - name: Validate required environment variables
      assert:
        that:
          - vault_address is defined
          - vault_address != ""
          - federation_environment in ['development', 'staging', 'production']
        fail_msg: "Required environment variables not set. Please set VAULT_ADDR and ensure valid environment."

    - name: Load secrets from Vault
      set_fact:
        vault_secrets: "{{ lookup('hashi_vault', 'secret=secret/cloud-federation/credentials') }}"
      no_log: true

  tasks:
    - name: Setup OpenStack Federation
      include_tasks: tasks/openstack-federation.yml
      tags: ['openstack', 'federation']

    - name: Configure Multi-Cloud Networking
      include_tasks: tasks/networking.yml
      tags: ['networking', 'vpn', 'bgp']

    - name: Deploy Burst Controller
      include_tasks: tasks/burst-controller.yml
      tags: ['controller', 'kubernetes']

    - name: Setup Security Infrastructure
      include_tasks: tasks/security.yml
      tags: ['security', 'vault', 'barbican']

    - name: Configure Monitoring Stack
      include_tasks: tasks/monitoring.yml
      tags: ['monitoring', 'prometheus', 'grafana']

    - name: Implement Governance Policies
      include_tasks: tasks/governance.yml
      tags: ['governance', 'policies', 'compliance']

    - name: Validate Federation Setup
      include_tasks: tasks/validation.yml
      tags: ['validation', 'tests']

  post_tasks:
    - name: Display federation endpoints
      debug:
        msg:
          - "Federation setup completed successfully!"
          - "Keystone Federation: https://{{ openstack_endpoint }}/v3/OS-FEDERATION"
          - "Burst Controller: https://burst-controller.{{ federation_domain }}"
          - "Monitoring: https://grafana.{{ federation_domain }}"
          - "Vault: https://vault.{{ federation_domain }}"

    - name: Generate federation report
      template:
        src: templates/federation-report.j2
        dest: "/tmp/federation-setup-report-{{ ansible_date_time.epoch }}.json"
      delegate_to: localhost

---
# OpenStack Federation Configuration Tasks
- name: Configure Keystone for Federation
  block:
    - name: Install OpenStack SDK
      pip:
        name: 
          - openstacksdk
          - python-keystoneclient
          - python-barbicanclient
        state: present
        extra_args: --user

    - name: Create federation domain
      openstack.cloud.identity_domain:
        cloud: "{{ openstack_cloud_config }}"
        name: "federation_domain"
        description: "Domain for federated identities"
        enabled: yes
      register: federation_domain

    - name: Create identity providers for each cloud
      openstack.cloud.federation_idp:
        cloud: "{{ openstack_cloud_config }}"
        name: "{{ item.key }}"
        description: "Identity provider for {{ item.key | upper }}"
        enabled: yes
        remote_ids: "{{ item.value.remote_ids }}"
      loop: "{{ federation_providers | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Create federation mappings
      openstack.cloud.federation_mapping:
        cloud: "{{ openstack_cloud_config }}"
        name: "{{ item.key }}_mapping"
        rules: "{{ item.value.mapping_rules }}"
      loop: "{{ federation_providers | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Configure federation protocols
      openstack.cloud.federation_protocol:
        cloud: "{{ openstack_cloud_config }}"
        name: "{{ item.value.protocol }}"
        idp: "{{ item.key }}"
        mapping: "{{ item.key }}_mapping"
      loop: "{{ federation_providers | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

  vars:
    openstack_cloud_config:
      auth:
        auth_url: "{{ vault_secrets.openstack_auth_url }}"
        username: "{{ vault_secrets.openstack_username }}"
        password: "{{ vault_secrets.openstack_password }}"
        project_name: "{{ vault_secrets.openstack_project }}"
        project_domain_name: "{{ vault_secrets.openstack_project_domain }}"
        user_domain_name: "{{ vault_secrets.openstack_user_domain }}"
      region_name: "{{ vault_secrets.openstack_region }}"
      interface: public
      identity_api_version: 3

    federation_providers:
      aws:
        protocol: saml2
        remote_ids:
          - "arn:aws:iam::{{ vault_secrets.aws_account_id }}:saml-provider/OpenStackFederation"
        mapping_rules:
          - local:
              - user:
                  name: "{0}"
              - group:
                  id: "{{ aws_federated_group_id }}"
            remote:
              - type: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
      
      gcp:
        protocol: openid_connect
        remote_ids:
          - "https://accounts.google.com"
        mapping_rules:
          - local:
              - user:
                  name: "{0}"
              - group:
                  id: "{{ gcp_federated_group_id }}"
            remote:
              - type: "email"
      
      azure:
        protocol: saml2
        remote_ids:
          - "https://sts.windows.net/{{ vault_secrets.azure_tenant_id }}/"
        mapping_rules:
          - local:
              - user:
                  name: "{0}"
              - group:
                  id: "{{ azure_federated_group_id }}"
            remote:
              - type: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"

  tags: ['openstack', 'federation']
